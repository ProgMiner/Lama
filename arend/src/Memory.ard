\import Arith.Nat
\import Function.Meta
\import Expr
\import Logic.Meta
\import Order.LinearOrder
\import Paths.Meta
\import Scope
\import Telescope
\import Logic
\import Paths
\import Set (DecSet, decideEq, no, yes)
\import Utils

\data BoxedValue
  | bvString String
  | bvArray (Array Value)
  | bvSexp Label (Array Value)
  | bvFun Expr (Array Var) Scope
  \where {

    \data Get (i : Nat) (y : Value) (x : BoxedValue) \elim x
      | bvString s => getString {i' : Fin _} (i = {Nat} i') (y = s i')
      | bvArray xs => getArray {i' : Fin _} (i = {Nat} i') (y = xs i')
      | bvSexp _ xs => getSexp {i' : Fin _} (i = {Nat} i') (y = xs i')
      \where {

        \use \level levelProp {i : Nat} {y : Value} {x : BoxedValue} (p q : Get i y x) : p = q \elim x, p, q
          | bvString s, getString p1 q1, getString p2 q2 => getStringLem p1 p2 q1 q2
          | bvArray xs, getArray p1 q1, getArray p2 q2 => getArrayLem p1 p2 q1 q2
          | bvSexp l xs, getSexp p1 q1, getSexp p2 q2 => getSexpLem p1 p2 q1 q2
          \where {

            \lemma getStringLem {s : String} {i1 i2 : Fin s.len} {i : Nat} {y : Value}
                                (p1 : i = {Nat} i1) (p2 : i = {Nat} i2) (q1 : y = s i1) (q2 : y = s i2)
              : getString p1 q1 = {Get i y (bvString s)} getString p2 q2 \elim p1, p2, q1
              | idp, idp, idp => pmap (getString _) propPath

            \lemma getArrayLem {xs : Array Value} {i1 i2 : Fin xs.len} {i : Nat} {y : Value}
                               (p1 : i = {Nat} i1) (p2 : i = {Nat} i2) (q1 : y = xs i1) (q2 : y = xs i2)
              : getArray p1 q1 = {Get i y (bvArray xs)} getArray p2 q2 \elim p1, p2, q1
              | idp, idp, idp => pmap (getArray _) propPath

            \lemma getSexpLem {xs : Array Value} {i1 i2 : Fin xs.len} {i : Nat} {y : Value} {l : Label}
                              (p1 : i = {Nat} i1) (p2 : i = {Nat} i2) (q1 : y = xs i1) (q2 : y = xs i2)
              : getSexp p1 q1 = {Get i y (bvSexp l xs)} getSexp p2 q2 \elim p1, p2, q1
              | idp, idp, idp => pmap (getSexp _) propPath
          }

        \lemma functionality {i : Nat} {y1 y2 : Value} {x : BoxedValue} (p : Get i y1 x) (q : Get i y2 x)
          : y1 = y2 \elim x, p, q
          | bvString s, getString {i1} idp idp, getString {i2} idp idp => idp
          | bvArray xs, getArray {i1} idp idp, getArray {i2} idp idp => idp
          | bvSexp _ xs, getSexp {i1} idp idp, getSexp {i2} idp idp => idp
      }

    \data Set (i : Nat) (y : Value) (x x' : BoxedValue) \elim y, x, x'
      | vInt y, bvString s, bvString s' => setString {i' : Fin _} (i = {Nat} i') (p : DArray.len {s} = DArray.len {s'})
                                                     (\Pi (j : Fin _) -> (j /= i') -> s j = s' (transport Fin p j))
                                                     (s' (transport Fin p i') = y)
      | y, bvArray xs, bvArray xs' => setArray {i' : Fin _} (i = {Nat} i') (p : DArray.len {xs} = DArray.len {xs'})
                                               (\Pi (j : Fin _) -> (j /= i') -> xs j = xs' (transport Fin p j))
                                               (xs' (transport Fin p i') = y)
      | y, bvSexp l xs, bvSexp l' xs' => setSexp (l = l') {i' : Fin _} (i = {Nat} i') (p : DArray.len {xs} = DArray.len {xs'})
                                                 (\Pi (j : Fin _) -> (j /= i') -> xs j = xs' (transport Fin p j))
                                                 (xs' (transport Fin p i') = y)
      \where {

        \use \level levelProp {i : Nat} {y : Value} {x x' : BoxedValue} (p q : Set i y x x') : p = q \elim y, x, x', p, q
          | vInt y, bvString s, bvString s', setString p1 p2 q1 q2, setString p1' p2' q1' q2' => setStringLem p1 p1' p2 p2' q1 q1' q2 q2'
          | y, bvArray xs, bvArray xs', setArray p1 p2 q1 q2, setArray p1' p2' q1' q2' => setArrayLem p1 p1' p2 p2' q1 q1' q2 q2'
          | y, bvSexp l xs, bvSexp l' xs', setSexp p p1 p2 q1 q2, setSexp p' p1' p2' q1' q2' => setSexpLem p p' p1 p1' p2 p2' q1 q1' q2 q2'
          \where {

            \lemma setStringLem {s s' : String} {i1 i2 : Fin s.len} {i : Nat} {y : Int}
                                (p1 : i = {Nat} i1) (p2 : i = {Nat} i2) (p1' p2' : s.len = s'.len)
                                (q1 : \Pi (j : Fin s.len) -> (j /= i1) -> s j = s' (transport Fin p1' j))
                                (q2 : \Pi (j : Fin s.len) -> (j /= i2) -> s j = s' (transport Fin p2' j))
                                (q1' : s' (transport Fin p1' i1) = y) (q2' : s' (transport Fin p2' i2) = y)
              : setString p1 p1' q1 q1' = {Set i (vInt y) (bvString s) (bvString s')} setString p2 p2' q2 q2'
            \elim p1, p2, q1'
              | idp, idp, idp => setStringLem' p1' p2' q1 q2 q2'

            \lemma setStringLem' {n n' : Nat} {s : String { | len => n }} {s' : String { | len => n' }} {i : Fin s.len}
                                 (p1' p2' : n = n')
                                 (q1 : \Pi (j : Fin s.len) -> j /= i -> s j = s' (transport Fin p1' j))
                                 (q2 : \Pi (j : Fin s.len) -> j /= i -> s j = s' (transport Fin p2' j))
                                 (q2' : s' (transport Fin p2' i) = s' (transport Fin p1' i))
              : setString idp p1' q1 idp = setString idp p2' q2 q2' \elim p1'
              | idp => Jl (\lam p2'' p => \Pi (a : _) (b : _) -> setString idp idp q1 idp = setString idp p2'' a b)
                  (\lam q3 q4 => pmap2 _ (propPath {_} {q1} {q3}) (propPath {_} {idp} {q4}))
                  (propPath {_} {idp} {p2'}) q2 q2'

            \lemma setArrayLem {xs xs' : Array Value} {i1 i2 : Fin xs.len} {i : Nat} {y : Value}
                               (p1 : i = {Nat} i1) (p2 : i = {Nat} i2) (p1' p2' : xs.len = xs'.len)
                               (q1 : \Pi (j : Fin xs.len) -> (j /= i1) -> xs j = xs' (transport Fin p1' j))
                               (q2 : \Pi (j : Fin xs.len) -> (j /= i2) -> xs j = xs' (transport Fin p2' j))
                               (q1' : xs' (transport Fin p1' i1) = y) (q2' : xs' (transport Fin p2' i2) = y)
              : setArray p1 p1' q1 q1' = {Set i y (bvArray xs) (bvArray xs')} setArray p2 p2' q2 q2'
            \elim p1, p2, q1'
              | idp, idp, idp => setArrayLem' p1' p2' q1 q2 q2'

            \lemma setArrayLem' {n n' : Nat} {xs : Array Value { | len => n }} {xs' : Array Value { | len => n' }}
                                {i : Fin xs.len} (p1' p2' : n = n')
                                (q1 : \Pi (j : Fin xs.len) -> j /= i -> xs j = xs' (transport Fin p1' j))
                                (q2 : \Pi (j : Fin xs.len) -> j /= i -> xs j = xs' (transport Fin p2' j))
                                (q2' : xs' (transport Fin p2' i) = xs' (transport Fin p1' i))
              : setArray idp p1' q1 idp = setArray idp p2' q2 q2' \elim p1'
              | idp => Jl (\lam p2'' p => \Pi (a : _) (b : _) -> setArray idp idp q1 idp = setArray idp p2'' a b)
                  (\lam q3 q4 => pmap2 _ (propPath {_} {q1} {q3}) (propPath {_} {idp} {q4}))
                  (propPath {_} {idp} {p2'}) q2 q2'

            \lemma setSexpLem {xs xs' : Array Value} {i1 i2 : Fin xs.len} {i : Nat} {y : Value} {l l' : Label}
                              (p p' : l = l') (p1 : i = {Nat} i1) (p2 : i = {Nat} i2) (p1' p2' : xs.len = xs'.len)
                              (q1 : \Pi (j : Fin xs.len) -> (j /= i1) -> xs j = xs' (transport Fin p1' j))
                              (q2 : \Pi (j : Fin xs.len) -> (j /= i2) -> xs j = xs' (transport Fin p2' j))
                              (q1' : xs' (transport Fin p1' i1) = y) (q2' : xs' (transport Fin p2' i2) = y)
              : setSexp p p1 p1' q1 q1' = {Set i y (bvSexp l xs) (bvSexp l' xs')} setSexp p' p2 p2' q2 q2'
            \elim p, p1, p2, q1'
              | idp, idp, idp, idp => setSexpLem' p' p1' p2' q1 q2 q2'

            \lemma setSexpLem' {n n' : Nat} {xs : Array Value { | len => n }} {xs' : Array Value { | len => n' }}
                               {l : Label} (p' : l = l) {i : Fin xs.len} (p1' p2' : n = n')
                               (q1 : \Pi (j : Fin xs.len) -> j /= i -> xs j = xs' (transport Fin p1' j))
                               (q2 : \Pi (j : Fin xs.len) -> j /= i -> xs j = xs' (transport Fin p2' j))
                               (q2' : xs' (transport Fin p2' i) = xs' (transport Fin p1' i))
              : setSexp idp idp p1' q1 idp = setSexp p' idp p2' q2 q2' \elim p1'
              | idp => Jl (\lam p2'' p => \Pi (a : _) (b : _) (c : _) -> setSexp idp idp idp q1 idp = setSexp c idp p2'' a b)
                  (\lam q3 q4 q5 => path $ \lam i => setSexp (propPath @ i) idp idp (propPath @ i) (propPath @ i))
                  (propPath {_} {idp} {p2'}) q2 q2' p'
          }

        \lemma functionality {i : Nat} {y : Value} {x x1 x2 : BoxedValue} (p : Set i y x x1) (q : Set i y x x2)
          : x1 = x2 \elim y, x, x1, x2, p, q
          | vInt y, bvString s, bvString s1, bvString s2, setString {i1} c1 p1 qs1 q1, setString {i2} c2 p2 qs2 q2 =>
            pmap bvString $ lem p1 c1 p2 c2 q1 q2 qs1 qs2

          | y, bvArray xs, bvArray xs1, bvArray xs2, setArray {i1} c1 p1 qs1 q1, setArray {i2} c2 p2 qs2 q2 =>
            pmap bvArray $ lem p1 c1 p2 c2 q1 q2 qs1 qs2

          | y, bvSexp l xs, bvSexp l1 xs1, bvSexp l2 xs2, setSexp l=l1 {i1} c1 p1 qs1 q1, setSexp l=l2 {i2} c2 p2 qs2 q2 =>
            pmap2 bvSexp (inv l=l1 *> l=l2) $ lem p1 c1 p2 c2 q1 q2 qs1 qs2
          \where {

            \sfunc lem {A : \Type} {i : Nat} {x : A} {xs xs1 xs2 : Array A}
                      (p1 : DArray.len {xs} = DArray.len {xs1}) {i1 : Fin (DArray.len {xs})} (c1 : i = {Nat} i1)
                      (p2 : DArray.len {xs} = DArray.len {xs2}) {i2 : Fin (DArray.len {xs})} (c2 : i = {Nat} i2)
                      (q1 : xs1 (transport Fin p1 i1) = x) (q2 : xs2 (transport Fin p2 i2) = x)
                      (qs1 : \Pi (j : Fin (DArray.len {xs})) -> j /= i1 -> xs j = xs1 (transport Fin p1 j))
                      (qs2 : \Pi (j : Fin (DArray.len {xs})) -> j /= i2 -> xs j = xs2 (transport Fin p2 j))
              : xs1 = xs2 => \let n => DArray.len {xs} \in
              \have | xs1=xs2' (j : Fin n) : xs1 (transport Fin p1 j) = xs2 (transport Fin p2 j)
              => \case NatSemiring.decideEq j i \with {
                  | yes e =>
                    xs1 (transport Fin p1 j) ==< pmap (\lam j' => xs1 (transport Fin p1 j')) (nat=fin $ e *> c1) >==
                    xs1 (transport Fin p1 i1) ==< q1 *> inv q2 >==
                    xs2 (transport Fin p2 i2) ==< pmap (\lam j' => xs2 (transport Fin p2 j')) (nat=fin $ inv $ e *> c2) >==
                    xs2 (transport Fin p2 j) `qed
                  | no n' =>
                    xs1 (transport Fin p1 j) ==< inv (qs1 _ (\lam p => n' $ p *> inv c1)) >==
                    xs j ==< qs2 _ (\lam p => n' $ p *> inv c2) >==
                    xs2 (transport Fin p2 j) `qed
                }
                    | xs1=xs2'' (j : Fin (DArray.len {xs1})) : xs1 j = xs2 (transport Fin (inv p1 *> p2) j) =>
                      xs1 j ==< pmap (\lam q => xs1 (transport Fin q j)) (inv $ inv_*> p1) >==
                      xs1 (transport Fin (inv p1 *> p1) j) ==< pmap (xs1 __) (transport_*> Fin _ _ _) >==
                      xs1 (transport Fin p1 $ transport Fin (inv p1) j) ==< xs1=xs2' (transport Fin (inv p1) j) >==
                      xs2 (transport Fin p2 $ transport Fin (inv p1) j) ==< pmap (xs2 __) (inv $ transport_*> Fin _ _ _) >==
                      xs2 (transport Fin (inv p1 *> p2) j) `qed
              \in exts (inv p1 *> p2, xs1=xs2'')
          }
      }
  }

\func Memory => Telescope (NatSemiring : DecSet Loc) BoxedValue
  \where {

    \func Memory' => Telescope.Telescope' (NatSemiring : DecSet Loc) BoxedValue

    \func NextLoc (m : Memory) (l : Loc) => \Sigma
      (\Pi (bv : BoxedValue) -> Not (Telescope.Get m l bv))
      (\Pi (l' : Loc) -> (l' NatSemiring.< l) -> ∃ (bv : BoxedValue) (Telescope.Get m l' bv))
      \where {

        \lemma functionality {m : Memory} {l1 l2 : Loc} (p : NextLoc m l1) (q : NextLoc m l2) : l1 = l2
          => \case NatSemiring.trichotomy l1 l2 \with {
            | less l1<l2 => \have (inP (bv, g)) => q.2 l1 l1<l2 \in \case p.1 bv g
            | equals l1=l2 => l1=l2
            | greater l1>l2 => \have (inP (bv, g)) => p.2 l2 l1>l2 \in \case q.1 bv g
          }
      }
  }
