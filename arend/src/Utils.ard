\import Data.Array
\import Function.Meta
\import Logic
\import Paths

\sfunc ::-inj-left {A : \Type} {x y : A} {xs ys : Array A} (p : x :: xs = y :: ys) : x = y
  => path $ \case p __ \with { | nil => x | a :: _ => a }

\sfunc ::-inj-right {A : \Type} {x y : A} {xs ys : Array A} (p : x :: xs = y :: ys) : xs = ys
  => path $ \case p __ \with { | nil => nil | _ :: l => l }

\sfunc ::-inj {A : \Type} {x y : A} {xs ys : Array A} (p : x :: xs = y :: ys) : \Sigma (x = y) (xs = ys)
  => (::-inj-left p, ::-inj-right p)

\lemma ::-inductive {A : \Type} {x : A} {xs : Array A} (p : x :: xs = xs) : Empty \elim xs
  | nil => \case p
  | x' :: xs => ::-inductive $ ::-inj-right {_} {x} {x'} {x' :: xs} p

\sfunc ++-assoc {A : \Type} (xs ys zs : Array A) : xs ++ ys ++ zs = (xs ++ ys) ++ zs \elim xs
  | nil => idp
  | x :: xs => pmap (x ::) $ ++-assoc xs ys zs

\func rev {A : \Type} (xs : Array A) : Array A \elim xs
  | nil => nil
  | x :: xs => rev xs ++ x :: nil
  \where {

    \sfunc ++-lem {A : \Type} (xs ys : Array A) : rev (xs ++ ys) = rev ys ++ rev xs \elim xs
      | nil => inv ++_nil
      | x :: xs => pmap (`++ x :: nil) (++-lem xs ys) *> inv (++-assoc (rev ys) (rev xs) (x :: nil))

    \sfunc involutive {A : \Type} (xs : Array A) : rev (rev xs) = xs \elim xs
      | nil => idp
      | x :: xs => ++-lem (rev xs) (x :: nil) *> pmap (x ::) (involutive xs)
  }

\sfunc ++-inj-left {A : \Type} {xs xs' : Array A} {ys : Array A}
                   (p : xs ++ ys = xs' ++ ys) : xs = xs' \elim xs, xs'
  | nil, nil => idp {Array A 0}
  | nil, x' :: xs' => \case nil-lem {_} {x' :: xs'} (inv p)
  | x :: xs, nil => \case nil-lem {_} {x :: xs} p
  | x :: xs, x' :: xs' =>
    \have | (p1, p2) => ::-inj p
          | q => ++-inj-left p2
    \in path $ \lam i => p1 i :: q i
  \where {

    \sfunc nil-lem' {A : \Type} {xs ys : Array A} (p : xs ++ ys = xs) : ys = nil \elim xs
      | nil => p
      | x :: xs => nil-lem' $ ::-inj-right p

    \sfunc nil-lem {A : \Type} {xs ys : Array A} (p : xs ++ ys = ys) : xs = nil =>
      \have | q => inv (rev.++-lem xs ys) *> pmap rev p
            | q' => nil-lem' q
      \in inv (rev.involutive xs) *> pmap rev q'
  }

\sfunc =-n {A : \Type} {n : Nat} (xs ys : Array A n) (p : xs = {Array A} ys) : xs = {Array A n} ys \elim p
  | idp => idp {Array A n}

\lemma nat=fin {n : Nat} {i j : Fin n} (p : i = {Nat} j) : i = {Fin n} j \elim p
  | idp => idp

\sfunc concat-transport-paths {A : \Type} (B : A -> \Type) {a a1 a2 : A} (p1 : a = a1) (p2 : a = a2) {b : B a}
                              {b1 : B a1} {b2 : B a2} (q1 : transport B p1 b = b1) (q2 : transport B p2 b = b2)
  : transport B (inv p1 *> p2) b1 = b2 =>
  pmap (transport _ (inv p1 *> p2)) (inv q1) *>
  inv (transport_*> B p1 (inv p1 *> p2) _) *>
  pmap (\lam p => transport B p _) (inv $ *>-assoc p1 (inv p1) p2) *>
  pmap (\lam p => transport B (p *> p2) _) (*>_inv p1) *>
  pmap (\lam p => transport B p _) (idp_*> p2) *>
  q2
