assoc : mu 28. forall 132, 133, 134, 144, 145, 146. Call (28, 146, 133, 134), Match (132, cons ([144 @ _, 145 @ _], 146 @ _), _), Sexp (None, 134), Sexp (Some, 134, 145) => (132, 133) -> 134 ;
deepFlatten : forall 198, 238, 239, 242, 243, 244. Ind (239, 198), Ind (239, 239), Call (mu 24. forall 69, 70, 71, 79, 80, 81. Call (69, 79, 81), Call (24, 69, 80, 71), Match (70, cons (79 @ _, 80 @ _), _) => (69, 70) -> 71, mu 245. forall 221, 222. Call (mu 24. forall 69, 70, 71, 79, 80, 81. Call (69, 79, 81), Call (24, 69, 80, 71), Match (70, cons (79 @ _, 80 @ _), _) => (69, 70) -> 71, 245, 221, 222), Call (forall. => (238) -> 239, 221, 222), Match (221, _, _, cons (_, _)) => (221) -> 222, 238, 239), Match (238, _, _, cons (_, _)), Sexp (cons, 239, 238, 244), Sexp (cons, 239, 242, 243) => (238) -> 198 ;
filter : mu 35. forall 308, 309, 310, 319, 320, 321, 322. Call (308, 319, 321), Call (35, 308, 320, 310), Call (35, 308, 320, 322), Match (309, cons (319 @ _, 320 @ _), _), Sexp (cons, 310, 319, 322) => (308, 309) -> 310 ;
find : mu 29. forall 149, 150, 151, 159, 160, 161. Call (149, 159, 161), Call (29, 149, 160, 151), Match (150, cons (159 @ _, 160 @ _), _), Sexp (None, 151), Sexp (Some, 151, 159) => (149, 150) -> 151 ;
flatten : forall 162, 163, 190, 191, 192, 193, 194, 195. Ind (191, 163), Ind (191, 191), Call (mu 24. forall 69, 70, 71, 79, 80, 81. Call (69, 79, 81), Call (24, 69, 80, 71), Match (70, cons (79 @ _, 80 @ _), _) => (69, 70) -> 71, forall 185, 186. Call (mu 24. forall 69, 70, 71, 79, 80, 81. Call (69, 79, 81), Call (24, 69, 80, 71), Match (70, cons (79 @ _, 80 @ _), _) => (69, 70) -> 71, forall. => (190) -> 191, 185, 186) => (185) -> 186, 162, 192), Sexp (cons, 191, 190, 195), Sexp (cons, 191, 193, 194) => (162) -> 163 ;
foldl : mu 22. forall 45, 47, 48, 54, 55, 56. Call (45, 48, 54, 56), Call (22, 45, 56, 55, 48), Match (47, cons (54 @ _, 55 @ _), _) => (45, 48, 47) -> 48 ;
foldr : mu 23. forall 57, 59, 60, 66, 67, 68. Call (57, 68, 66, 60), Call (23, 57, 60, 67, 68), Match (59, cons (66 @ _, 67 @ _), _) => (57, 60, 59) -> 60 ;
i__Infix_434343 : mu 26. forall 96, 98, 104, 105, 106. Call (26, 105, 98, 106), Match (96, cons (104 @ _, 105 @ _), _), Sexp (cons, 98, 104, 106) => (96, 98) -> 98 ;
iter : mu 24. forall 69, 70, 71, 79, 80, 81. Call (69, 79, 81), Call (24, 69, 80, 71), Match (70, cons (79 @ _, 80 @ _), _) => (69, 70) -> 71 ;
map : mu 25. forall 82, 83, 84, 92, 93, 94, 95. Call (82, 92, 94), Call (25, 82, 93, 95), Match (83, cons (92 @ _, 93 @ _), _), Sexp (cons, 84, 94, 95) => (82, 83) -> 84 ;
remove : mu 34. forall 294, 295, 296, 304, 306, 307. Call (294, 304, 306), Call (34, 294, 296, 307), Match (295, cons (304 @ _, 296 @ _), _), Sexp (cons, 296, 304, 307) => (294, 295) -> 296 ;
reverse : forall 107, 108, 131. Match (107, cons (131 @ _, 107 @ _), _), Sexp (cons, 108, 131, 108) => (107) -> 108 ;
size : mu 21. forall 36, 42. Call (21, 42, Int), Match (36, cons (_, 42 @ _), _) => (36) -> Int ;
unzip : mu 33. forall 266, 283, 284, 285, 287. Call (33, 284, 285), Match (266, cons ([283 @ _, 283 @ _], 284 @ _), _), Match (285, [287 @ _, 287 @ _]) => (266) -> [cons (283, 287)] ;
zip : mu 32. forall 247, 249, 261, 263, 264, 265. Call (32, 263, 261, 265), Match (247, cons (264 @ _, 261 @ _), _), Match (247, cons (264 @ _, 263 @ _), _), Sexp (cons, 249, [264], 265) => (247, 247) -> 249 ;
